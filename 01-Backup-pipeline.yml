# trigger: 
# - main

# pool:
#   vmImage: ubuntu-latest

# variables:
# - name: DEV_ENVIRONMENT
#   value: dev

# # Stage-1: Terraform Validate Stage
# ## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
# ## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
# ## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

# stages:
# - stage: TerraformValidate
#   jobs:
#     - job: TerraformValidateJob
#       continueOnError: false
#       steps:
#       - task: PublishPipelineArtifact@1
#         displayName: Publish Artifacts
#         inputs:
#           targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#           artifact: 'terraform-manifests-out'
#           publishLocation: 'pipeline'
      
#       - task: TerraformCLI@0
#         displayName: Terraform Init
#         inputs:
#             command: 'init'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#             backendType: 'azurerm'
#             backendServiceArm: 'terraform-aks-azurerm-svc-con'
#             backendAzureRmKey: 'aks-demo-one'
#             allowTelemetryCollection: false

#       - task: TerraformCLI@0
#         displayName: Terraform Validate
#         inputs:
#           command: 'validate'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#           allowTelemetryCollection: false

# - stage: DeployAKSClusters
#   jobs:
#     - deployment: DeployDevAKSCluster
#       displayName: Aks Provision
#       pool:
#         vmImage: 'ubuntu-latest' 
#       strategy:
#         runOnce:
#           deploy:
#             steps:            
          
#             - task: DownloadSecureFile@1
#               displayName: Download SSH Key
#               name: sshkey
#               inputs:
#                 secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
#             - task: TerraformCLI@0
#               displayName: Terraform Init
#               inputs:
#                 command: 'init'
#                 workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
#                 backendType: 'azurerm'
#                 backendServiceArm: 'terraform-aks-azurerm-svc-con'
#                 backendAzureRmResourceGroupName: 'Capstonedemoniaz1'
#                 backendAzureRmStorageAccountName: 'tstatestorageniaz'
#                 backendAzureRmContainerName: 'tfstatefiles1'
#                 backendAzureRmKey: 'aks-terraform.tfstate'
#                 allowTelemetryCollection: false

#             - task: TerraformCLI@0
#               displayName: Terraform Plan
#               inputs:
#                 command: 'plan'
#                 workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
#                 environmentServiceName: 'terraform-aks-azurerm-svc-con'
#                 commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -out $(Pipeline.Workspace)/terraform-manifests-out/$(Build.BuildId).out'
#                 allowTelemetryCollection: false
            
#             - task: TerraformCLI@0
#               displayName: Terraform Apply
#               inputs:
#                 command: 'apply'
#                 workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
#                 environmentServiceName: 'terraform-aks-azurerm-svc-con'
#                 commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(Build.BuildId).out'
#                 allowTelemetryCollection: false 

# - stage: Build
#   displayName: Build and push Docker Image
#   jobs:  
#   - job: Build
#     displayName: Build job
#     steps:
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'ACRserviceprinciplenew'
#         repository: 'nextjs-app1'
#         command: 'buildAndPush'
#         Dockerfile: '**/Dockerfile'
#         tags: |
#           latest
#           $(Build.BuildId)
    
#     - task: CopyFiles@2
#       inputs:
#         SourceFolder: '$(System.DefaultWorkingDirectory)/kube-manifests/'
#         Contents: |
#           deployment.yml
#           service.yml
#         TargetFolder: '$(Build.ArtifactStagingDirectory)'
#     - task: PublishBuildArtifacts@1
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: 'drop'
#         publishLocation: 'Container'